; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
name = "ESP32 Pulse Scaler"
description = "Calibrate a pulse flow meter to output the correct amount of pulses"
default_envs = esp32-c3-dev

[common]
; [IMPORTANT!} This version number is used in OTA updates and must be updated with new releases.
firmware_version = 1.0.0
lib_deps_common = 
	ArduinoJson@^7.2.0
	fmtlib/fmt@^8.1.1

[env]
platform = espressif32
framework = arduino
lib_compat_mode = strict
lib_ldf_mode = chain+
check_tool = cppcheck ; Static code analysis tool.
check_flags = 
    cppcheck: --enable=warning,performance,portability --force --inconclusive
    cppcheck: --suppress=missingIncludeSystem
    cppcheck: -i .pio/libdeps
board_build.filesystem = littlefs
monitor_speed = 115200
upload_speed = 2000000
monitor_filters = esp32_exception_decoder     ; Decode exceptions to improve debugging output.
build_flags = 
	-D FIRMWARE_VERSION=\"${common.FIRMWARE_VERSION}\"
board_build.partitions = partitions-equal-size.csv
; extra_scripts = pre:scripts/conditionally_flash_partitions.py
lib_deps = 
	${common.lib_deps_common}
	EEPROM
	https://github.com/tzapu/WiFiManager@^2.0.17
	https://github.com/mathieucarbou/ESPAsyncWebServer@3.3.12
	https://github.com/khoih-prog/ESPAsyncDNSServer
	NTPClient
	https://github.com/chrisjoyce911/esp32FOTA.git#master

[env:main_app]
build_src_filter = +<*> -<factory_main.cpp>
board_build.partitions = partitions.csv

[env:factory_app]
build_src_filter = +<*> -<main.cpp>
board_build.partitions = partitions.csv

[dev_env]
extends = common
build_type = debug
build_flags =
	${env.build_flags}                           	; Inherit build flags from the environment settings
	-Og                                           ; Optimization Level: Optimize debug experience. Reduces optimizations to maintain more accurate debugging information. Suitable for stepping through code during debugging sessions.
	-DENABLE_ASSERTIONS                           ; Define ENABLE_ASSERTIONS: Enables assertions in your code, which are conditions that the program tests for during execution. Useful for debugging and catching erroneous conditions while in development.
	-Wl,-Map,output.map                           ; Linker Option: Generate a map file named 'output.map'. This map file provides detailed information about the memory layout of the program, helpful for analyzing memory usage and understanding symbol locations.
	-Wall -Wextra                                 ; Compiler Warnings: Enable all standard warnings (`-Wall`) and additional warnings (`-Wextra`) to catch potentially problematic code patterns like unused variables, uninitialized variables, etc.
	-DCORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_DEBUG

[release_env]
extends = common
build_type = release
build_flags = 
	${env.build_flags}
	-Os																					; Optimization for size.
	-ffunction-sections													; Place each function in its own section (for linker optimization).
	-fdata-sections															; Place each data item in its own section (for linker optimization).
	-Wl,--gc-sections														; Enable garbage collection of unused sections.

[env:esp32-c3-dev]
extends = dev_env
board = lolin_c3_mini

[env:esp32-c3-release]
extends = release_env
board = lolin_c3_mini

[env:lolin_s2_mini-dev]
extends = dev_env
board = lolin_s2_mini

[env:lolin_s2_mini-release]
extends = release_env
board = lolin_s2_mini

[env:esp32-s3]
extends = dev_env
board = esp32-s3-devkitc-1

[env:esp32-dev-kit]
extends = dev_env
board = esp32doit-devkit-v1

[env:esp8266]
monitor_filters = esp8266_exception_decoder
board = esp8266-d1_mini

[env:native]
platform = native
framework = ; No framework needed.
build_flags = 
	-std=gnu++11 # use installed GNU C++11 compiler.
	; -pthread # found in gtest documentation
	-g                                ; Generate debug information
	-ffunction-sections													; Place each function in its own section (for linker optimization).
	-fdata-sections															; Place each data item in its own section (for linker optimization
build_type = test
test_filter = ;Logger ; Filter for which tests to run
test_framework = googletest
lib_ldf_mode = chain+
lib_compat_mode = off
; lib_ignore = 
  ; src
lib_deps = 
	${common.lib_deps_common}
	google/googletest@^1.12.1
 	ArduinoFake

[env:debug]
platform = native
build_type = debug
test_build_src = true
build_flags =
    -D UNIT_TEST
    -g                                ; Generate debug information
    -Wall                             ; Enable all standard warnings
    -Wextra                           ; Enable extra warnings
    -fsanitize=address                ; Enable AddressSanitizer for detecting memory errors
    -fsanitize=undefined              ; Enable UndefinedBehaviorSanitizer
lib_deps =
    ${common.lib_deps_common}
    google/googletest@^1.12.1
    ArduinoFake

[env:native_debug]
platform = native
framework = ;
build_flags = -PLATFORM_NATIVE
build_type = test
debug_test = test_logger
test_filter = test_logger
test_framework = googletest
lib_ldf_mode = deep+
lib_deps = 
	${common.lib_deps_common}
  google/googletest@^1.12.1
  ArduinoFake