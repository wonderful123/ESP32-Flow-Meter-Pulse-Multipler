; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
name = "ESP32 Pulse Scaler"
description = "Calibrate a pulse flow meter to output the correct amount of pulses"
default_envs = esp32-c3-dev

[common]
; [IMPORTANT!} This version number is used in OTA updates and must be updated with new releases.
firmware_version = 1.0.0
lib_deps_common = 
	ArduinoJson@^7.0.4
	fmtlib/fmt@^8.1.1

[env]
platform = espressif32
framework = arduino
lib_ldf_mode = chain+
check_tool = cppcheck ; Static code analysis tool.
check_flags = cppcheck: --enable=warning,performance,portability --force --inconclusive
board_build.filesystem = littlefs
monitor_speed = 115200
upload_speed = 2000000
build_flags = 
	-D FIRMWARE_VERSION=\"${common.FIRMWARE_VERSION}\"
board_build.partitions = partitions-equal-size.csv
; extra_scripts = pre:scripts/conditionally_flash_partitions.py
lib_deps = 
	${common.lib_deps_common}
	EEPROM
	me-no-dev/AsyncTCP@^1.1.1
	https://github.com/khoih-prog/ESPAsyncDNSServer
	https://github.com/khoih-prog/ESPAsyncWebServer.git
	https://github.com/khoih-prog/ESPAsync_WiFiManager
	NTPClient
	https://github.com/chrisjoyce911/esp32FOTA.git#master

[env:esp32-c3-dev]
board = lolin_c3_mini
build_type = debug
monitor_filters = esp32_exception_decoder     ; Decode exceptions to improve debugging output.
build_flags =
	${env.build_flags}
	-Og																					; Optimization level set for debugging.
	-DENABLE_ASSERTIONS
	-Wl,-Map,output.map													; Generate a map file for detailed memory usage.
	-DCORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_DEBUG

[env:esp32-c3-release]
board = lolin_c3_mini
build_flags = 
	${env.build_flags}
	-Os																					; Optimization for size.
	-ffunction-sections													; Place each function in its own section (for linker optimization).
	-fdata-sections															; Place each data item in its own section (for linker optimization).
	-Wl,--gc-sections														; Enable garbage collection of unused sections.
build_type = release
monitor_filters = 

[env:main_app]
build_src_filter = +<*> -<factory_main.cpp>
board_build.partitions = partitions.csv

[env:factory_app]
build_src_filter = +<*> -<main.cpp>
board_build.partitions = partitions.csv

[env:lolin_s2_mini]
board = lolin_s2_mini

[env:esp32-s3]
board= esp32-s3-devkitm-1

[env:native]
platform = native
build_flags = 
 -std=gnu++11 # use installed GNU C++11 compiler.
 -pthread # found in gtest documentation
build_type = test
; framework =																		; No framework needed.
test_filter = ;Logger ; Filter for which tests to run
test_framework = googletest
lib_ldf_mode = deep+
lib_compat_mode = off
lib_ignore = 
 src
lib_deps = 
	${common.lib_deps_common}
	google/googletest@^1.12.1
 	ArduinoFake